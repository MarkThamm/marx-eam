plugins {
    id 'java'
    id 'io.quarkus'
}

repositories {
    mavenCentral()
    mavenLocal()
}

ext {
    metamodelPath = "$projectDir/src/main/java-generated"
    //mapStructVersion
}

dependencies {

    implementation enforcedPlatform("${quarkusPlatformGroupId}:${quarkusPlatformArtifactId}:${quarkusPlatformVersion}")
    implementation 'io.quarkus:quarkus-resteasy-reactive'
    implementation 'io.quarkus:quarkus-resteasy-reactive-jsonb'
    implementation 'io.quarkus:quarkus-rest-client'
    implementation 'io.quarkus:quarkus-arc'
    implementation 'io.quarkus:quarkus-smallrye-health'
    implementation 'io.quarkus:quarkus-smallrye-metrics'
    implementation 'io.quarkus:quarkus-smallrye-openapi'

    //Thirdparty
    implementation "org.apache.commons:commons-lang3:${commonLang3Version}"
    implementation "org.jboss.slf4j:slf4j-jboss-logmanager"
    implementation "org.mapstruct:mapstruct:${mapStrustVersion}"

    testImplementation 'io.quarkus:quarkus-junit5'
    testImplementation 'io.rest-assured:rest-assured'

}

group 'de.bafin'
version '1.0.0-SNAPSHOT'

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

test {
    systemProperty "java.util.logging.manager", "org.jboss.logmanager.LogManager"
}
compileJava {
    doFirst {
        if (file(metamodelPath).exists()) {
            FileCollection collection = files { file(metamodelPath).listFiles() }
            collection.each { delete it }
        }
        file(metamodelPath).mkdirs()
    }
    options.encoding = 'UTF-8'
    options.compilerArgs << '-parameters'
}

compileTestJava {
    options.encoding = 'UTF-8'
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.compilerArgs += ['-Amapstruct.suppressGeneratorTimestamp=true']
    options.annotationProcessorGeneratedSourcesDirectory = file('/src/main/java-generated')
}


